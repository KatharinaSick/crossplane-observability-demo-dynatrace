apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-create-dashboard
  namespace: {{ .Release.Namespace }}
spec:
  parallelism: 1
  completions: 1
  template:
    metadata:
      name: create-dashboard
    spec:
      volumes:
        - name: scripts
          configMap:
            name: {{ .Release.Name }}-dashboard-script
            defaultMode: 0777
        - name: dashboards
          configMap:
            name: {{ .Release.Name }}-dashboards
            defaultMode: 0777
      containers:
        - name: create-dashboard
          image: alpine:latest
          volumeMounts:
            - mountPath: /scripts
              name: scripts
            - mountPath: /dashboards
              name: dashboards
          env:
            - name: OAUTH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.oauthCredentialsSecretName }}
                  key: clientId
            - name: OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.oauthCredentialsSecretName }}
                  key: clientSecret
          command:
            - /bin/sh
            - -c
            - /scripts/create-dashboard.sh
      restartPolicy: Never
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-dashboard-script
  namespace: {{ .Release.Namespace }}
data:
  create-dashboard.sh: |
    printf "Installing packages\n"
    apk add curl
    apk add jq

    printf "\nFetching OAuth token\n"
    token=$(curl --request POST 'https://sso-sprint.dynatracelabs.com/sso/oauth2/token' \
    --silent \
    --header 'Content-Type: application/x-www-form-urlencoded' \
    --data-urlencode 'grant_type=client_credentials' \
    --data-urlencode "client_id=$OAUTH_CLIENT_ID" \
    --data-urlencode "client_secret=$OAUTH_CLIENT_SECRET" \
    --data-urlencode 'scope=document:documents:write document:documents:read' \
    | jq -r .access_token)

    printf "\nCreating dashboard\n"
    {{- if .Values.dashboard.enabled }}
    documentId=$(curl --request POST 'https://ypd98635.sprint.apps.dynatracelabs.com/platform/document/v1/documents' \
    --silent \
    --header "Authorization: Bearer $token" \
    --header 'Content-Type: multipart/form-data' \
    --form name="{{ .Values.workloadName }} ({{ .Values.cluster }}/{{ .Values.namespace }})" \
    --form type=dashboard \
    --form content=@dashboards/app.json \
    | jq -r .id)

    # TODO configure dashboard access
    {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-dashboards
  namespace: {{ .Release.Namespace }}
data:
  {{- if .Values.dashboard.enabled }}
  app.json: |
    {
      "version": 13,
      "variables": [],
      "tiles": {
        "1": {
          "type": "markdown",
          "title": "",
          "content": "# {{ .Values.workloadName }} ({{ .Values.cluster }}/{{ .Values.namespace }})"
        },
        "2": {
          "type": "markdown",
          "title": "",
          "content": "### Is my application healthy?"
        },
        "3": {
          "type": "data",
          "title": "CPU",
          "query": "timeseries { \n  usage = sum(dt.kubernetes.container.cpu_usage), \n  request = sum(dt.kubernetes.container.requests_cpu), \n  limit = sum(dt.kubernetes.container.limits_cpu)\n},\nfilter: k8s.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\"",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "lineChart",
          "visualizationSettings": {
            "thresholds": [],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "k8s.workload.name",
                "valueAxisLabel": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "usage",
                  "request",
                  "limit"
                ],
                "leftAxisDimensions": [],
                "fields": [],
                "values": []
              }
            },
            "singleValue": {
              "showLabel": true,
              "label": "",
              "prefixIcon": "",
              "recordField": "error",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            },
            "unitsOverrides": [
              {
                "identifier": "usage",
                "unitCategory": "unspecified",
                "baseUnit": "core",
                "displayUnit": null,
                "decimals": 0,
                "suffix": "",
                "delimiter": false,
                "added": 1709412001287
              },
              {
                "identifier": "request",
                "unitCategory": "unspecified",
                "baseUnit": "core",
                "displayUnit": null,
                "decimals": 0,
                "suffix": "",
                "delimiter": true,
                "added": 1709412063114
              },
              {
                "identifier": "limit",
                "unitCategory": "unspecified",
                "baseUnit": "core",
                "displayUnit": null,
                "decimals": 0,
                "suffix": "",
                "delimiter": true,
                "added": 1709412075639
              }
            ]
          }
        },
        "4": {
          "type": "data",
          "title": "Memory",
          "query": "timeseries { \n  usage = sum(dt.kubernetes.container.memory_working_set), \n  request = sum(dt.kubernetes.container.requests_memory), \n  limit = sum(dt.kubernetes.container.limits_memory)\n},\nfilter: k8s.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\"",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "lineChart",
          "visualizationSettings": {
            "thresholds": [],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "k8s.workload.name",
                "valueAxisLabel": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "usage",
                  "request",
                  "limit"
                ],
                "leftAxisDimensions": [],
                "fields": [],
                "values": []
              }
            },
            "singleValue": {
              "showLabel": true,
              "label": "",
              "prefixIcon": "",
              "recordField": "error",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            },
            "unitsOverrides": []
          }
        },
        "5": {
          "type": "data",
          "title": "Running Pods",
          "query": "timeseries pods=count(dt.kubernetes.pods), by: { pod_phase }, nonempty: true, \nfilter: k8s.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\" and pod_phase == \"Running\"\n| fieldsAdd last=arrayLast(pods)\n",
          "davis": {
            "enabled": false,
            "componentState": {
              "selectedAnalyzerName": "dt.statistics.ui.ForecastAnalyzer",
              "inputData": {
                "dt.statistics.ui.ForecastAnalyzer": {
                  "generalParameters": {
                    "timeframe": {
                      "startTime": "2024-03-02T19:03:37.569Z",
                      "endTime": "2024-03-02T21:03:37.569Z"
                    },
                    "resolveDimensionalQueryData": true,
                    "logVerbosity": "INFO"
                  },
                  "forecastHorizon": 100,
                  "query": "timeseries pods=count(dt.kubernetes.pods), \nfilter: k8s.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\",\nby: { pod_phase }\n"
                }
              }
            },
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "singleValue",
          "visualizationSettings": {
            "thresholds": [
              {
                "id": 1,
                "field": "last",
                "title": "",
                "isEnabled": true,
                "rules": [
                  {
                    "id": 0,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                    },
                    "comparator": "≥",
                    "label": "",
                    "value": 0
                  },
                  {
                    "id": 1,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                    },
                    "comparator": "=",
                    "label": "",
                    "value": 0
                  },
                  {
                    "id": 2,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                    },
                    "comparator": "≤",
                    "label": ""
                  }
                ]
              }
            ],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "absolute",
                "showTotalValue": false,
                "hideLabels": false
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxis": "pod_phase",
                "valueAxis": "interval",
                "categoryAxisLabel": "pod_phase",
                "valueAxisLabel": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "pods"
                ],
                "leftAxisDimensions": [
                  "pod_phase",
                  "last"
                ],
                "fields": [],
                "values": []
              }
            },
            "singleValue": {
              "showLabel": false,
              "label": "Running Pods",
              "prefixIcon": "CheckCircleIcon",
              "recordField": "last",
              "autoscale": true,
              "sparklineSettings": {
                "showTicks": false
              },
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [
                [
                  "content"
                ]
              ],
              "columnWidths": {}
            }
          }
        },
        "6": {
          "type": "data",
          "title": "Pending Pods",
          "query": "timeseries pods=count(dt.kubernetes.pods, default: 0), by: { pod_phase }, nonempty: true, \nfilter: k8s.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\" and pod_phase == \"Pending\"\n| fieldsAdd last=arrayLast(pods)",
          "davis": {
            "enabled": false,
            "componentState": {
              "selectedAnalyzerName": "dt.statistics.ui.ForecastAnalyzer",
              "inputData": {
                "dt.statistics.ui.ForecastAnalyzer": {
                  "generalParameters": {
                    "timeframe": {
                      "startTime": "2024-03-02T19:03:37.569Z",
                      "endTime": "2024-03-02T21:03:37.569Z"
                    },
                    "resolveDimensionalQueryData": true,
                    "logVerbosity": "INFO"
                  },
                  "forecastHorizon": 100,
                  "query": "timeseries pods=count(dt.kubernetes.pods), \nfilter: k8s.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\",\nby: { pod_phase }\n"
                }
              }
            },
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "singleValue",
          "visualizationSettings": {
            "thresholds": [
              {
                "id": 1,
                "field": "last",
                "title": "",
                "isEnabled": true,
                "rules": [
                  {
                    "id": 0,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                    },
                    "comparator": "=",
                    "label": ""
                  },
                  {
                    "id": 1,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                    },
                    "comparator": "≥",
                    "label": "",
                    "value": 1
                  },
                  {
                    "id": 2,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                    },
                    "comparator": "≥",
                    "label": ""
                  }
                ]
              }
            ],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "absolute",
                "showTotalValue": false,
                "hideLabels": false
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "pod_phase",
                "valueAxisLabel": "interval",
                "categoryAxis": "pod_phase",
                "valueAxis": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "pods"
                ],
                "leftAxisDimensions": [
                  "pod_phase",
                  "last"
                ],
                "fields": [],
                "values": []
              }
            },
            "singleValue": {
              "showLabel": false,
              "label": "Pending Pods",
              "prefixIcon": "ClockIcon",
              "recordField": "last",
              "autoscale": true,
              "sparklineSettings": {
                "showTicks": false
              },
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [
                [
                  "content"
                ]
              ],
              "columnWidths": {}
            }
          }
        },
        "7": {
          "type": "data",
          "title": "Failed Pods",
          "query": "timeseries pods=count(dt.kubernetes.pods, default: 0), by: { pod_phase }, nonempty: true, \nfilter: k8s.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\" and pod_phase == \"Failed\"\n| fieldsAdd last=arrayLast(pods)\n",
          "davis": {
            "enabled": false,
            "componentState": {
              "selectedAnalyzerName": "dt.statistics.ui.ForecastAnalyzer",
              "inputData": {
                "dt.statistics.ui.ForecastAnalyzer": {
                  "generalParameters": {
                    "timeframe": {
                      "startTime": "2024-03-02T19:03:37.569Z",
                      "endTime": "2024-03-02T21:03:37.569Z"
                    },
                    "resolveDimensionalQueryData": true,
                    "logVerbosity": "INFO"
                  },
                  "forecastHorizon": 100,
                  "query": "timeseries pods=count(dt.kubernetes.pods), \nfilter: k8s.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\",\nby: { pod_phase }\n"
                }
              }
            },
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "singleValue",
          "visualizationSettings": {
            "thresholds": [
              {
                "id": 1,
                "field": "last",
                "title": "",
                "isEnabled": true,
                "rules": [
                  {
                    "id": 0,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                    },
                    "comparator": "=",
                    "label": ""
                  },
                  {
                    "id": 1,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                    },
                    "comparator": "≥",
                    "label": ""
                  },
                  {
                    "id": 2,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                    },
                    "comparator": "≥",
                    "label": "",
                    "value": 1
                  }
                ]
              }
            ],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "absolute",
                "showTotalValue": false,
                "hideLabels": false
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "pod_phase",
                "valueAxisLabel": "interval",
                "categoryAxis": "pod_phase",
                "valueAxis": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "pods"
                ],
                "leftAxisDimensions": [
                  "pod_phase",
                  "last"
                ],
                "fields": [],
                "values": []
              }
            },
            "singleValue": {
              "showLabel": false,
              "label": "Failed Pods",
              "prefixIcon": "CriticalFailedIcon",
              "recordField": "last",
              "autoscale": true,
              "sparklineSettings": {
                "showTicks": false
              },
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [
                [
                  "content"
                ]
              ],
              "columnWidths": {}
            }
          }
        },
        "8": {
          "type": "data",
          "title": "Unknown Pods",
          "query": "timeseries pods=count(dt.kubernetes.pods, default: 0), by: { pod_phase }, nonempty: true, \nfilter: k8s.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\" and pod_phase == \"Unknown\"\n| fieldsAdd last=arrayLast(pods)\n",
          "davis": {
            "enabled": false,
            "componentState": {
              "selectedAnalyzerName": "dt.statistics.ui.ForecastAnalyzer",
              "inputData": {
                "dt.statistics.ui.ForecastAnalyzer": {
                  "generalParameters": {
                    "timeframe": {
                      "startTime": "2024-03-02T19:03:37.569Z",
                      "endTime": "2024-03-02T21:03:37.569Z"
                    },
                    "resolveDimensionalQueryData": true,
                    "logVerbosity": "INFO"
                  },
                  "forecastHorizon": 100,
                  "query": "timeseries pods=count(dt.kubernetes.pods), \nfilter: k8s.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\",\nby: { pod_phase }\n"
                }
              }
            },
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "singleValue",
          "visualizationSettings": {
            "thresholds": [
              {
                "id": 1,
                "field": "last",
                "title": "",
                "isEnabled": true,
                "rules": [
                  {
                    "id": 0,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                    },
                    "comparator": "=",
                    "label": ""
                  },
                  {
                    "id": 1,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                    },
                    "comparator": "≥",
                    "label": ""
                  },
                  {
                    "id": 2,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                    },
                    "comparator": "≥",
                    "label": "",
                    "value": 1
                  }
                ]
              }
            ],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "absolute",
                "showTotalValue": false,
                "hideLabels": false
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "pod_phase",
                "valueAxisLabel": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "pods"
                ],
                "leftAxisDimensions": [
                  "last"
                ],
                "fields": [],
                "values": []
              }
            },
            "singleValue": {
              "showLabel": false,
              "label": "Unknown Pods",
              "prefixIcon": "ErrorIcon",
              "recordField": "last",
              "autoscale": true,
              "sparklineSettings": {
                "showTicks": false
              },
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [
                [
                  "content"
                ]
              ],
              "columnWidths": {}
            }
          }
        },
        "9": {
          "type": "data",
          "title": "Emergency Logs",
          "query": "fetch logs\n| filter dt.kubernetes.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\"\n| filter loglevel == \"EMERGENCY\"\n| summarize count()",
          "davis": {
            "enabled": false,
            "componentState": {
              "selectedAnalyzerName": "dt.statistics.ui.ForecastAnalyzer",
              "inputData": {
                "dt.statistics.ui.ForecastAnalyzer": {
                  "generalParameters": {
                    "timeframe": {
                      "startTime": "2024-03-02T19:03:37.569Z",
                      "endTime": "2024-03-02T21:03:37.569Z"
                    },
                    "resolveDimensionalQueryData": true,
                    "logVerbosity": "INFO"
                  },
                  "forecastHorizon": 100,
                  "query": "timeseries pods=count(dt.kubernetes.pods), \nfilter: k8s.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\",\nby: { pod_phase }\n"
                }
              }
            },
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "singleValue",
          "visualizationSettings": {
            "thresholds": [
              {
                "id": 1,
                "field": "count()",
                "title": "",
                "isEnabled": true,
                "rules": [
                  {
                    "id": 0,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                    },
                    "comparator": "=",
                    "label": "",
                    "value": 0
                  },
                  {
                    "id": 1,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                    },
                    "comparator": ">",
                    "label": "",
                    "value": 0
                  },
                  {
                    "id": 2,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                    },
                    "comparator": "≥",
                    "label": "",
                    "value": 10
                  }
                ]
              }
            ],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "absolute",
                "showTotalValue": false,
                "hideLabels": false
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "loglevel",
                "valueAxisLabel": "count()"
              }
            },
            "singleValue": {
              "showLabel": false,
              "label": "Emergency Logs",
              "prefixIcon": "CriticalFailedIcon",
              "recordField": "count()",
              "autoscale": true,
              "sparklineSettings": {
                "showTicks": false,
                "isVisible": false
              },
              "alignment": "center",
              "colorThresholdTarget": "value",
              "trend": {
                "isVisible": false
              }
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [
                [
                  "content"
                ]
              ],
              "columnWidths": {}
            }
          }
        },
        "10": {
          "type": "data",
          "title": "Kubernetes Warnings",
          "query": "fetch events\n| filter dt.kubernetes.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"b-team\"\n| filter dt.kubernetes.event.important == \"true\" and status == \"WARN\"\n| summarize count()",
          "davis": {
            "enabled": false,
            "componentState": {
              "selectedAnalyzerName": "dt.statistics.ui.ForecastAnalyzer",
              "inputData": {
                "dt.statistics.ui.ForecastAnalyzer": {
                  "generalParameters": {
                    "timeframe": {
                      "startTime": "2024-03-02T19:03:37.569Z",
                      "endTime": "2024-03-02T21:03:37.569Z"
                    },
                    "resolveDimensionalQueryData": true,
                    "logVerbosity": "INFO"
                  },
                  "forecastHorizon": 100,
                  "query": "timeseries pods=count(dt.kubernetes.pods), \nfilter: k8s.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\",\nby: { pod_phase }\n"
                }
              }
            },
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "singleValue",
          "visualizationSettings": {
            "thresholds": [
              {
                "id": 1,
                "field": "count()",
                "title": "",
                "isEnabled": true,
                "rules": [
                  {
                    "id": 0,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                    },
                    "comparator": "=",
                    "label": "",
                    "value": 0
                  },
                  {
                    "id": 1,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                    },
                    "comparator": ">",
                    "label": "",
                    "value": 0
                  },
                  {
                    "id": 2,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                    },
                    "comparator": "≥",
                    "label": "",
                    "value": 10
                  }
                ]
              }
            ],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "absolute",
                "showTotalValue": false,
                "hideLabels": false
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "loglevel",
                "valueAxisLabel": "count()"
              }
            },
            "singleValue": {
              "showLabel": false,
              "label": "Emergency Logs",
              "prefixIcon": "CriticalIcon",
              "recordField": "count()",
              "autoscale": true,
              "sparklineSettings": {
                "showTicks": false,
                "isVisible": false
              },
              "alignment": "center",
              "colorThresholdTarget": "value",
              "trend": {
                "isVisible": false
              }
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [
                [
                  "content"
                ]
              ],
              "columnWidths": {}
            }
          }
        },
        "11": {
          "type": "data",
          "title": "Kubernetes Warnings",
          "query": "fetch events\n| filter dt.kubernetes.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"b-team\"\n| filter dt.kubernetes.event.important == \"true\" and status == \"WARN\"\n| fields timestamp, dt.kubernetes.event.involved_object.name, dt.kubernetes.event.reason, dt.kubernetes.event.message\n| sort timestamp asc\n",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "table",
          "visualizationSettings": {
            "thresholds": [
              {
                "id": 1,
                "field": "event.category",
                "title": "",
                "isEnabled": true,
                "rules": [
                  {
                    "id": 0,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                    },
                    "comparator": "=",
                    "label": "",
                    "value": ""
                  },
                  {
                    "id": 1,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                    },
                    "comparator": "=",
                    "label": "",
                    "value": "WARN"
                  },
                  {
                    "id": 2,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                    },
                    "comparator": "=",
                    "label": "",
                    "value": "ERROR"
                  }
                ]
              }
            ],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "dt.davis.disable_merging_reason",
                "valueAxisLabel": "dt.davis.timeout"
              }
            },
            "singleValue": {
              "showLabel": true,
              "label": "",
              "prefixIcon": "",
              "recordField": "timestamp",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {},
              "sortBy": {
                "columnId": "[\"timestamp\"]",
                "direction": "descending"
              }
            }
          }
        },
        "12": {
          "type": "data",
          "title": "Logs",
          "query": "fetch logs\n| filter dt.kubernetes.cluster.name == \"{{ .Values.cluster }}\" and k8s.namespace.name == \"{{ .Values.namespace }}\"\n| fields \n  timestamp, \n  pod = k8s.pod.name, \n  logLevel=if(loglevel==\"EMERGENCY\", \"🚨 EMERGENCY\", else:if(loglevel==\"ERROR\", \"❗ ERROR\", else:if(loglevel==\"WARNING\", \"⚠️ WARNING\",  else: loglevel))),\n  content\n| sort timestamp desc\n| limit 100",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "table",
          "visualizationSettings": {
            "thresholds": [
              {
                "id": 1,
                "field": "logLevel",
                "title": "",
                "isEnabled": true,
                "rules": [
                  {
                    "id": 0,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                    },
                    "comparator": "=",
                    "label": ""
                  },
                  {
                    "id": 1,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                    },
                    "comparator": "=",
                    "label": "",
                    "value": "WARN"
                  },
                  {
                    "id": 2,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                    },
                    "comparator": "=",
                    "label": "",
                    "value": "ERROR"
                  },
                  {
                    "id": 3,
                    "color": {
                      "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                    },
                    "comparator": "=",
                    "label": "",
                    "value": "EMERGENCY"
                  }
                ]
              }
            ],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {}
            },
            "singleValue": {
              "showLabel": true,
              "label": "",
              "prefixIcon": "",
              "recordField": "error",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [
                [
                  "content"
                ]
              ],
              "columnWidths": {}
            }
          }
        },
        "13": {
          "type": "markdown",
          "title": "",
          "content": "### Has my application vulnerabilities?"
        },
        "14": {
          "type": "data",
          "title": "Open",
          "query": "fetch events\n| filter dt.system.bucket==\"default_security_events\"\n| filter event.provider==\"Dynatrace\"\n| filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n| filter event.level==\"ENTITY\"\n| filter dt.entity.cloud_application.name == \"silly-demo\" and k8s.namespace.name == \"{{ .Values.namespace }}\" and dt.kubernetes.cluster.name == \"{{ .Values.cluster }}\"\n// filter for the latest snapshot per entity\n| sort timestamp, direction:\"descending\"\n| summarize {\nevent.status=takeFirst(event.status),\nvulnerability.resolution.status=takeFirst(vulnerability.resolution.status),\nvulnerability.mute.status=takeFirst(vulnerability.mute.status),\nvulnerability.risk.level=takeFirst(vulnerability.risk.level),\nvulnerability.stack=takeFirst(vulnerability.stack),\nvulnerability.type=takeFirst(vulnerability.type),\nvulnerability.davis_assessment.exploit_status=takeFirst(vulnerability.davis_assessment.exploit_status),\nvulnerability.external_id=takeFirst(vulnerability.external_id),\nvulnerability.references.cve=takeFirst(vulnerability.references.cve),\nvulnerability.technology=takeFirst(vulnerability.technology),\naffected_entity.vulnerable_component.name=takeFirst(affected_entity.vulnerable_component.name),\naffected_entity.management_zones.names=takeFirst(affected_entity.management_zones.names),\naffected_entity.name=takeFirst(affected_entity.name),\nrelated_entities.hosts.names=takeFirst(related_entities.hosts.names),\nrelated_entities.kubernetes_workloads.names=takeFirst(related_entities.kubernetes_workloads.names),\nrelated_entities.kubernetes_clusters.names=takeFirst(related_entities.kubernetes_clusters.names),\ntimestamp=takeFirst(timestamp)\n}, by: {vulnerability.display_id, affected_entity.id}\n// end of filter for the latest snapshot\n| summarize\n`Status`=takeFirst(vulnerability.resolution.status),\n`Muted`=takeFirst(vulnerability.mute.status==\"MUTED\"),\nby: {vulnerability.display_id,alias:`Problem id`}\n| summarize\n`Muted`=countIf(Muted==TRUE),\n`Resolved`=countIf(Status!=\"OPEN\" AND Muted==FALSE),\n`Open`=countIf(Status==\"OPEN\" AND Muted==FALSE)\n| fields Open=if(Open>0,Open,else:\"-\")",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "singleValue",
          "visualizationSettings": {
            "thresholds": [
              {
                "id": 1,
                "field": "Open",
                "title": "",
                "isEnabled": true,
                "rules": [
                  {
                    "id": 0,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                    },
                    "comparator": "≥",
                    "label": ""
                  },
                  {
                    "id": 1,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                    },
                    "comparator": "≥",
                    "label": "",
                    "value": 1
                  },
                  {
                    "id": 2,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                    },
                    "comparator": "≥",
                    "label": "",
                    "value": 10
                  }
                ]
              }
            ],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {}
            },
            "singleValue": {
              "showLabel": false,
              "label": "",
              "prefixIcon": "ApplicationSecuritySignetIcon",
              "recordField": "Open",
              "autoscale": true,
              "sparklineSettings": {
                "isVisible": true
              },
              "alignment": "center",
              "trend": {
                "isVisible": true
              },
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            }
          }
        },
        "15": {
          "type": "data",
          "title": "Resolved",
          "query": "fetch events\n| filter dt.system.bucket==\"default_security_events\"\n| filter event.provider==\"Dynatrace\"\n| filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n| filter event.level==\"ENTITY\"\n| filter dt.entity.cloud_application.name == \"silly-demo\" and k8s.namespace.name == \"{{ .Values.namespace }}\" and dt.kubernetes.cluster.name == \"{{ .Values.cluster }}\"\n// filter for the latest snapshot per entity\n| sort timestamp, direction:\"descending\"\n| summarize {\nevent.status=takeFirst(event.status),\nvulnerability.resolution.status=takeFirst(vulnerability.resolution.status),\nvulnerability.mute.status=takeFirst(vulnerability.mute.status),\nvulnerability.risk.level=takeFirst(vulnerability.risk.level),\nvulnerability.stack=takeFirst(vulnerability.stack),\nvulnerability.type=takeFirst(vulnerability.type),\nvulnerability.davis_assessment.exploit_status=takeFirst(vulnerability.davis_assessment.exploit_status),\nvulnerability.external_id=takeFirst(vulnerability.external_id),\nvulnerability.references.cve=takeFirst(vulnerability.references.cve),\nvulnerability.technology=takeFirst(vulnerability.technology),\naffected_entity.vulnerable_component.name=takeFirst(affected_entity.vulnerable_component.name),\naffected_entity.management_zones.names=takeFirst(affected_entity.management_zones.names),\naffected_entity.name=takeFirst(affected_entity.name),\nrelated_entities.hosts.names=takeFirst(related_entities.hosts.names),\nrelated_entities.kubernetes_workloads.names=takeFirst(related_entities.kubernetes_workloads.names),\nrelated_entities.kubernetes_clusters.names=takeFirst(related_entities.kubernetes_clusters.names),\ntimestamp=takeFirst(timestamp)\n}, by: {vulnerability.display_id, affected_entity.id}\n// end of filter for the latest snapshot\n| summarize\n`Status`=takeFirst(vulnerability.resolution.status),\n`Muted`=takeFirst(vulnerability.mute.status==\"MUTED\"),\nby: {vulnerability.display_id,alias:`Problem id`}\n| summarize\n`Muted`=countIf(Muted==TRUE),\n`Resolved`=countIf(Status!=\"OPEN\" AND Muted==FALSE),\n`Open`=countIf(Status==\"OPEN\" AND Muted==FALSE)\n| fields Resolved=if(Resolved>0,Resolved,else:\"-\")",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "singleValue",
          "visualizationSettings": {
            "thresholds": [],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {}
            },
            "singleValue": {
              "showLabel": false,
              "label": "",
              "prefixIcon": "SecurityResolvedIcon",
              "recordField": "Resolved",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            }
          }
        },
        "16": {
          "type": "data",
          "title": "Muted",
          "query": "fetch events\n| filter dt.system.bucket==\"default_security_events\"\n| filter event.provider==\"Dynatrace\"\n| filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n| filter event.level==\"ENTITY\"\n| filter dt.entity.cloud_application.name == \"silly-demo\" and k8s.namespace.name == \"{{ .Values.namespace }}\" and dt.kubernetes.cluster.name == \"{{ .Values.cluster }}\"\n// filter for the latest snapshot per entity\n| sort timestamp, direction:\"descending\"\n| summarize {\nevent.status=takeFirst(event.status),\nvulnerability.resolution.status=takeFirst(vulnerability.resolution.status),\nvulnerability.mute.status=takeFirst(vulnerability.mute.status),\nvulnerability.risk.level=takeFirst(vulnerability.risk.level),\nvulnerability.stack=takeFirst(vulnerability.stack),\nvulnerability.type=takeFirst(vulnerability.type),\nvulnerability.davis_assessment.exploit_status=takeFirst(vulnerability.davis_assessment.exploit_status),\nvulnerability.external_id=takeFirst(vulnerability.external_id),\nvulnerability.references.cve=takeFirst(vulnerability.references.cve),\nvulnerability.technology=takeFirst(vulnerability.technology),\naffected_entity.vulnerable_component.name=takeFirst(affected_entity.vulnerable_component.name),\naffected_entity.management_zones.names=takeFirst(affected_entity.management_zones.names),\naffected_entity.name=takeFirst(affected_entity.name),\nrelated_entities.hosts.names=takeFirst(related_entities.hosts.names),\nrelated_entities.kubernetes_workloads.names=takeFirst(related_entities.kubernetes_workloads.names),\nrelated_entities.kubernetes_clusters.names=takeFirst(related_entities.kubernetes_clusters.names),\ntimestamp=takeFirst(timestamp)\n}, by: {vulnerability.display_id, affected_entity.id}\n// end of filter for the latest snapshot\n| summarize\n`Status`=takeFirst(vulnerability.resolution.status),\n`Muted`=takeFirst(vulnerability.mute.status==\"MUTED\"),\nby: {vulnerability.display_id,alias:`Problem id`}\n| summarize\n`Muted`=countIf(Muted==TRUE),\n`Resolved`=countIf(Status!=\"OPEN\" AND Muted==FALSE),\n`Open`=countIf(Status==\"OPEN\" AND Muted==FALSE)\n| fields Muted=if(Muted>0,Muted,else:\"-\")",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "singleValue",
          "visualizationSettings": {
            "thresholds": [],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {}
            },
            "singleValue": {
              "showLabel": false,
              "label": "",
              "prefixIcon": "NotificationOffIcon",
              "recordField": "Muted",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            }
          }
        },
        "17": {
          "type": "data",
          "title": "Open Vulnerabilities",
          "query": "fetch events\n| filter dt.system.bucket==\"default_security_events\"\n| filter event.provider==\"Dynatrace\"\n| filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n| filter event.level==\"ENTITY\"\n| filter dt.entity.cloud_application.name == \"silly-demo\" and k8s.namespace.name == \"{{ .Values.namespace }}\" and dt.kubernetes.cluster.name == \"{{ .Values.cluster }}\"\n// filter for the latest snapshot per entity\n| sort timestamp, direction:\"descending\"\n| summarize {\nevent.status=takeFirst(event.status),\nvulnerability.resolution.status=takeFirst(vulnerability.resolution.status),\nvulnerability.mute.status=takeFirst(vulnerability.mute.status),\nvulnerability.risk.level=takeFirst(vulnerability.risk.level),\nvulnerability.risk.score=takeFirst(vulnerability.risk.score),\nvulnerability.stack=takeFirst(vulnerability.stack),\nvulnerability.type=takeFirst(vulnerability.type),\nvulnerability.davis_assessment.exploit_status=takeFirst(vulnerability.davis_assessment.exploit_status),\nvulnerability.external_id=takeFirst(vulnerability.external_id),\nvulnerability.references.cve=takeFirst(vulnerability.references.cve),\nvulnerability.technology=takeFirst(vulnerability.technology),\naffected_entity.vulnerable_component.name=takeFirst(affected_entity.vulnerable_component.name),\naffected_entity.management_zones.names=takeFirst(affected_entity.management_zones.names),\naffected_entity.name=takeFirst(affected_entity.name),\nrelated_entities.hosts.names=takeFirst(related_entities.hosts.names),\nrelated_entities.kubernetes_workloads.names=takeFirst(related_entities.kubernetes_workloads.names),\nrelated_entities.kubernetes_clusters.names=takeFirst(related_entities.kubernetes_clusters.names),\ntimestamp=takeFirst(timestamp)\n}, by: {vulnerability.display_id, affected_entity.id}\n// end of filter for the latest snapshot\n| fields timestamp, riskLevel = vulnerability.risk.level, cve = vulnerability.references.cve, type = vulnerability.type, affectedEntity = affected_entity.name, score = vulnerability.risk.score",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "table",
          "visualizationSettings": {
            "thresholds": [
              {
                "id": 1,
                "field": "Open",
                "title": "",
                "isEnabled": true,
                "rules": [
                  {
                    "id": 0,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                    },
                    "comparator": "≥",
                    "label": ""
                  },
                  {
                    "id": 1,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                    },
                    "comparator": "≥",
                    "label": "",
                    "value": 1
                  },
                  {
                    "id": 2,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                    },
                    "comparator": "≥",
                    "label": "",
                    "value": 10
                  }
                ]
              }
            ],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "riskLevel",
                "valueAxisLabel": "score"
              }
            },
            "singleValue": {
              "showLabel": false,
              "label": "",
              "prefixIcon": "ApplicationSecuritySignetIcon",
              "recordField": "Open",
              "autoscale": true,
              "sparklineSettings": {
                "isVisible": true
              },
              "alignment": "center",
              "trend": {
                "isVisible": true
              },
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            }
          }
        }
        {{- if .Values.databaseName }}
      ,
        "18": {
          "type": "markdown",
          "title": "",
          "content": "### Is my database healthy?"
        },
        "19": {
          "type": "data",
          "title": "Database Connections",
          "query": "timeseries sum(dt.cloud.aws.rds.connections),\nfilter: in(dt.source_entity, classicEntitySelector(\"type(relational_database_service),entityName(\\\"{{ .Values.databaseName }}\\\")\"))",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "lineChart",
          "visualizationSettings": {
            "thresholds": [],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "dt.source_entity",
                "valueAxisLabel": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "sum(dt.cloud.aws.rds.connections)"
                ],
                "leftAxisDimensions": [],
                "fields": [],
                "values": []
              },
              "legend": {
                "hidden": true
              }
            },
            "singleValue": {
              "showLabel": true,
              "label": "",
              "prefixIcon": "",
              "recordField": "k8s.workload.name",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            }
          }
        },
        "20": {
          "type": "data",
          "title": "Database Free Storage",
          "query": "timeseries max(dt.cloud.aws.rds.free),\nfilter: in(dt.source_entity, classicEntitySelector(\"type(relational_database_service),entityName(\\\"{{ .Values.databaseName }}\\\")\"))",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "lineChart",
          "visualizationSettings": {
            "thresholds": [],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "dt.source_entity",
                "valueAxisLabel": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "max(dt.cloud.aws.rds.free)"
                ],
                "leftAxisDimensions": [],
                "fields": [],
                "values": []
              },
              "legend": {
                "hidden": true
              }
            },
            "singleValue": {
              "showLabel": true,
              "label": "",
              "prefixIcon": "",
              "recordField": "k8s.workload.name",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            }
          }
        },
        "21": {
          "type": "data",
          "title": "Database CPU Usage",
          "query": "timeseries max(dt.cloud.aws.rds.cpu.usage),\nfilter: in(dt.source_entity, classicEntitySelector(\"type(relational_database_service),entityName(\\\"{{ .Values.databaseName }}\\\")\"))",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "lineChart",
          "visualizationSettings": {
            "thresholds": [],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "dt.source_entity",
                "valueAxisLabel": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "max(dt.cloud.aws.rds.cpu.usage)"
                ],
                "leftAxisDimensions": [],
                "fields": [],
                "values": []
              },
              "legend": {
                "hidden": true
              }
            },
            "singleValue": {
              "showLabel": true,
              "label": "",
              "prefixIcon": "",
              "recordField": "k8s.workload.name",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            }
          }
        },
        "22": {
          "type": "data",
          "title": "Database Freeable Memory",
          "query": "timeseries max(dt.cloud.aws.rds.memory.freeable),\nfilter: in(dt.source_entity, classicEntitySelector(\"type(relational_database_service),entityName(\\\"{{ .Values.databaseName }}\\\")\"))",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "lineChart",
          "visualizationSettings": {
            "thresholds": [],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "dt.source_entity",
                "valueAxisLabel": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "max(dt.cloud.aws.rds.memory.freeable)"
                ],
                "leftAxisDimensions": [],
                "fields": [],
                "values": []
              },
              "legend": {
                "hidden": true
              }
            },
            "singleValue": {
              "showLabel": true,
              "label": "",
              "prefixIcon": "",
              "recordField": "k8s.workload.name",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            }
          }
        },
        "23": {
          "type": "data",
          "title": "Database Latency",
          "query": "timeseries {read = max(dt.cloud.aws.rds.latency.read), write = max(dt.cloud.aws.rds.latency.write)},\nfilter: in(dt.source_entity, classicEntitySelector(\"type(relational_database_service),entityName(\\\"{{ .Values.databaseName }}\\\")\"))",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "lineChart",
          "visualizationSettings": {
            "thresholds": [],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "dt.source_entity",
                "valueAxisLabel": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "read",
                  "write"
                ],
                "leftAxisDimensions": [],
                "fields": [],
                "values": []
              },
              "legend": {
                "position": "auto",
                "hidden": false
              }
            },
            "singleValue": {
              "showLabel": true,
              "label": "",
              "prefixIcon": "",
              "recordField": "k8s.workload.name",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            }
          }
        },
        "24": {
          "type": "data",
          "title": "Database IOPS",
          "query": "timeseries {read = max(dt.cloud.aws.rds.ops.read), write = max(dt.cloud.aws.rds.ops.write)},\nfilter: in(dt.source_entity, classicEntitySelector(\"type(relational_database_service),entityName(\\\"{{ .Values.databaseName }}\\\")\"))",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "lineChart",
          "visualizationSettings": {
            "thresholds": [],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "dt.source_entity",
                "valueAxisLabel": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "read",
                  "write"
                ],
                "leftAxisDimensions": [],
                "fields": [],
                "values": []
              },
              "legend": {
                "position": "auto",
                "hidden": false
              }
            },
            "singleValue": {
              "showLabel": true,
              "label": "",
              "prefixIcon": "",
              "recordField": "k8s.workload.name",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            }
          }
        },
        "25": {
          "type": "data",
          "title": "Database Throughput",
          "query": "timeseries {read = max(dt.cloud.aws.rds.throughput.read), write = max(dt.cloud.aws.rds.throughput.write)},\nfilter: in(dt.source_entity, classicEntitySelector(\"type(relational_database_service),entityName(\\\"{{ .Values.databaseName }}\\\")\"))",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "lineChart",
          "visualizationSettings": {
            "thresholds": [],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "dt.source_entity",
                "valueAxisLabel": "interval"
              },
              "fieldMapping": {
                "timestamp": "timeframe",
                "leftAxisValues": [
                  "read",
                  "write"
                ],
                "leftAxisDimensions": [],
                "fields": [],
                "values": []
              },
              "legend": {
                "position": "auto",
                "hidden": false
              }
            },
            "singleValue": {
              "showLabel": true,
              "label": "",
              "prefixIcon": "",
              "recordField": "k8s.workload.name",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {}
            }
          }
        },
        "26": {
          "type": "data",
          "title": "Database Events",
          "query": "fetch events\n| filter in(dt.source_entity, classicEntitySelector(\"type(relational_database_service),entityName(\\\"{{ .Values.databaseName }}\\\")\"))\n| fields timestamp, event.category, event.description\n| sort timestamp asc",
          "davis": {
            "enabled": false,
            "davisVisualization": {
              "isAvailable": true
            }
          },
          "visualization": "table",
          "visualizationSettings": {
            "thresholds": [
              {
                "id": 1,
                "field": "event.category",
                "title": "",
                "isEnabled": true,
                "rules": [
                  {
                    "id": 0,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                    },
                    "comparator": "=",
                    "label": "",
                    "value": ""
                  },
                  {
                    "id": 1,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                    },
                    "comparator": "=",
                    "label": "",
                    "value": "WARN"
                  },
                  {
                    "id": 2,
                    "color": {
                      "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                    },
                    "comparator": "=",
                    "label": "",
                    "value": "ERROR"
                  }
                ]
              }
            ],
            "chartSettings": {
              "gapPolicy": "connect",
              "circleChartSettings": {
                "groupingThresholdType": "relative",
                "groupingThresholdValue": 0,
                "valueType": "relative"
              },
              "categoryOverrides": {},
              "categoricalBarChartSettings": {
                "categoryAxisLabel": "dt.davis.impact_level",
                "valueAxisLabel": "dt.davis.timeout"
              }
            },
            "singleValue": {
              "showLabel": true,
              "label": "",
              "prefixIcon": "",
              "recordField": "timestamp",
              "autoscale": true,
              "alignment": "center",
              "colorThresholdTarget": "value"
            },
            "table": {
              "rowDensity": "condensed",
              "enableSparklines": false,
              "hiddenColumns": [],
              "lineWrapIds": [],
              "columnWidths": {},
              "sortBy": {
                "columnId": "[\"timestamp\"]",
                "direction": "descending"
              }
            }
          }
        }
        {{- end }}
      },
      "layouts": {
        "1": {
          "x": 0,
          "y": 0,
          "w": 24,
          "h": 1
        },
        "2": {
          "x": 0,
          "y": 1,
          "w": 12,
          "h": 1
        },
        "3": {
          "x": 0,
          "y": 2,
          "w": 6,
          "h": 6
        },
        "4": {
          "x": 6,
          "y": 2,
          "w": 6,
          "h": 6
        },
        "5": {
          "x": 0,
          "y": 8,
          "w": 2,
          "h": 3
        },
        "6": {
          "x": 2,
          "y": 8,
          "w": 2,
          "h": 3
        },
        "7": {
          "x": 4,
          "y": 8,
          "w": 2,
          "h": 3
        },
        "8": {
          "x": 6,
          "y": 8,
          "w": 2,
          "h": 3
        },
        "9": {
          "x": 8,
          "y": 8,
          "w": 2,
          "h": 3
        },
        "10": {
          "x": 10,
          "y": 8,
          "w": 2,
          "h": 3
        },
        "11": {
          "x": 0,
          "y": 11,
          "w": 12,
          "h": 5
        },
        "12": {
          "x": 0,
          "y": 16,
          "w": 12,
          "h": 10
        },
        "13": {
          "x": 13,
          "y": 1,
          "w": 11,
          "h": 1
        },
        "14": {
          "x": 13,
          "y": 2,
          "w": 2,
          "h": 2
        },
        "15": {
          "x": 13,
          "y": 4,
          "w": 2,
          "h": 2
        },
        "16": {
          "x": 13,
          "y": 6,
          "w": 2,
          "h": 2
        },
        "17": {
          "x": 15,
          "y": 2,
          "w": 9,
          "h": 6
        }
        {{- if .Values.databaseName }}
      ,
        "18": {
          "x": 13,
          "y": 8,
          "w": 11,
          "h": 1
        },
        "19": {
          "x": 13,
          "y": 9,
          "w": 5,
          "h": 5
        },
        "20": {
          "x": 18,
          "y": 9,
          "w": 6,
          "h": 5
        },
        "21": {
          "x": 13,
          "y": 14,
          "w": 5,
          "h": 5
        },
        "22": {
          "x": 18,
          "y": 14,
          "w": 6,
          "h": 5
        },
        "23": {
          "x": 13,
          "y": 19,
          "w": 5,
          "h": 4
        },
        "24": {
          "x": 18,
          "y": 19,
          "w": 3,
          "h": 4
        },
        "25": {
          "x": 21,
          "y": 19,
          "w": 3,
          "h": 4
        },
        "26": {
          "x": 13,
          "y": 23,
          "w": 11,
          "h": 3
        }
        {{- end }}
      }
    }
  {{- end }}
